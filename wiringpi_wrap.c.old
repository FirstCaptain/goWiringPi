/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */
#define SWIGMODULE wiringpi
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct { char *p; int n; } _gostring_;
typedef struct { void* array; unsigned int len; unsigned int cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static void *_swig_goallocate(size_t len) {
  struct {
    size_t len;
    void *ret;
  } a;
  a.len = len;
  crosscall2(_cgo_allocate, &a, (int) sizeof a);
  return a.ret;
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




static _gostring_ _swig_makegostring(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)_swig_goallocate(l + 1);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#include "WiringPi/ds1302.h"
#include "WiringPi/gertboard.h"
#include "WiringPi/mcp23008.h"
#include "WiringPi/mcp23017.h"
#include "WiringPi/mcp23s08.h"
#include "WiringPi/mcp23s17.h"
#include "WiringPi/mcp23x0817.h"
#include "WiringPi/mcp23x08.h"
#include "WiringPi/piFace.h"
#include "WiringPi/piNes.h"
#include "WiringPi/softPwm.h"
#include "WiringPi/softServo.h"
#include "WiringPi/softTone.h"
#include "WiringPi/sr595.h"
#include "WiringPi/wiringPi.h"
#include "WiringPi/wiringPiI2C.h"
#include "WiringPi/wiringPiSPI.h"
#include "WiringPi/wiringSerial.h"
#include "WiringPi/wiringShift.h"

#ifdef __cplusplus
extern "C" {
#endif

void
_wrap_wiringPiSetup(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)wiringPiSetup();
  swig_a->result = result; 
}


void
_wrap_wiringPiSetupSys(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)wiringPiSetupSys();
  swig_a->result = result; 
}


void
_wrap_wiringPiSetupGpio(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)wiringPiSetupGpio();
  swig_a->result = result; 
}


void
_wrap_wiringPiSetupPhys(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)wiringPiSetupPhys();
  swig_a->result = result; 
}


void
_wrap_piFaceSetup(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)piFaceSetup(arg1);
  swig_a->result = result; 
}


void
_wrap_pinMode(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  pinMode(arg1,arg2);
  
}


void
_wrap_pullUpDnControl(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  pullUpDnControl(arg1,arg2);
  
}


void
_wrap_digitalRead(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)digitalRead(arg1);
  swig_a->result = result; 
}


void
_wrap_digitalWrite(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  digitalWrite(arg1,arg2);
  
}


void
_wrap_pwmWrite(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  pwmWrite(arg1,arg2);
  
}


void
_wrap_analogRead(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)analogRead(arg1);
  swig_a->result = result; 
}


void
_wrap_analogWrite(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  analogWrite(arg1,arg2);
  
}


void
_wrap_piBoardRev(void *swig_v)
{
  int result;
  
  struct swigargs {
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int)piBoardRev();
  swig_a->result = result; 
}


void
_wrap_wpiPinToGpio(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)wpiPinToGpio(arg1);
  swig_a->result = result; 
}


void
_wrap_setPadDrive(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  setPadDrive(arg1,arg2);
  
}


void
_wrap_getAlt(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)getAlt(arg1);
  swig_a->result = result; 
}


void
_wrap_digitalWriteByte(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  digitalWriteByte(arg1);
  
}


void
_wrap_pwmSetMode(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  pwmSetMode(arg1);
  
}


void
_wrap_pwmSetRange(void *swig_v)
{
  unsigned int arg1 ;
  
  struct swigargs {
    unsigned int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned int)swig_a->arg1; 
  
  pwmSetRange(arg1);
  
}


void
_wrap_pwmSetClock(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  pwmSetClock(arg1);
  
}


void
_wrap_gpioClockSet(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  gpioClockSet(arg1,arg2);
  
}


// void
// _wrap_waitForInterrupt_set(void *swig_v)
// {
//   int (*arg1)(int,int) = (int (*)(int,int)) 0 ;
  
//   struct swigargs {
//     void *arg1;
//   } *swig_a = (struct swigargs *) swig_v;
  
//   arg1 = *(int (**)(int,int))&swig_a->arg1; 
  
//   waitForInterrupt = arg1;
  
// }


void
_wrap_waitForInterrupt_get(void *swig_v)
{
  int (*result)(int,int) = 0 ;
  
  struct swigargs {
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int (*)(int,int))waitForInterrupt;
  *(int (**)(int,int))&swig_a->result = result; 
}


void
_wrap_wiringPiISR(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  void (*arg3)(void) = (void (*)(void)) 0 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    void *arg3;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = *(void (**)(void))&swig_a->arg3; 
  
  result = (int)wiringPiISR(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_piThreadCreate(void *swig_v)
{
  void *(*arg1)(void *) = (void *(*)(void *)) 0 ;
  int result;
  
  struct swigargs {
    void *arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void *(**)(void *))&swig_a->arg1; 
  
  result = (int)piThreadCreate(arg1);
  swig_a->result = result; 
}


void
_wrap_piLock(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  piLock(arg1);
  
}


void
_wrap_piUnlock(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  piUnlock(arg1);
  
}


void
_wrap_piHiPri(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)piHiPri(arg1);
  swig_a->result = result; 
}


void
_wrap_delay(void *swig_v)
{
  unsigned int arg1 ;
  
  struct swigargs {
    unsigned int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned int)swig_a->arg1; 
  
  delay(arg1);
  
}


void
_wrap_delayMicroseconds(void *swig_v)
{
  unsigned int arg1 ;
  
  struct swigargs {
    unsigned int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (unsigned int)swig_a->arg1; 
  
  delayMicroseconds(arg1);
  
}


void
_wrap_millis(void *swig_v)
{
  unsigned int result;
  
  struct swigargs {
    long : 0;
    unsigned int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (unsigned int)millis();
  swig_a->result = result; 
}


void
_wrap_micros(void *swig_v)
{
  unsigned int result;
  
  struct swigargs {
    long : 0;
    unsigned int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (unsigned int)micros();
  swig_a->result = result; 
}


void
_wrap_serialOpen(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    _gostring_ arg1;
    int arg2;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)serialOpen(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_serialClose(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  serialClose(arg1);
  
}


void
_wrap_serialFlush(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  serialFlush(arg1);
  
}


void
_wrap_serialPutchar(void *swig_v)
{
  int arg1 ;
  unsigned char arg2 ;
  
  struct swigargs {
    int arg1;
    char arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (unsigned char)swig_a->arg2; 
  
  serialPutchar(arg1,arg2);
  
}


void
_wrap_serialPuts(void *swig_v)
{
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    int arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  serialPuts(arg1,arg2);
  
}


void
_wrap_serialPrintf(void *swig_v)
{
  int arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  struct swigargs {
    int arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  serialPrintf(arg1,arg2,arg3);
  
}


void
_wrap_serialDataAvail(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)serialDataAvail(arg1);
  swig_a->result = result; 
}


void
_wrap_serialGetchar(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)serialGetchar(arg1);
  swig_a->result = result; 
}


void
_wrap_shiftOut(void *swig_v)
{
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t arg4 ;
  
  struct swigargs {
    char arg1;
    char arg2;
    char arg3;
    char arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint8_t)swig_a->arg1; 
  arg2 = (uint8_t)swig_a->arg2; 
  arg3 = (uint8_t)swig_a->arg3; 
  arg4 = (uint8_t)swig_a->arg4; 
  
  shiftOut(arg1,arg2,arg3,arg4);
  
}


void
_wrap_shiftIn(void *swig_v)
{
  uint8_t arg1 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  uint8_t result;
  
  struct swigargs {
    char arg1;
    char arg2;
    char arg3;
    long : 0;
    char result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint8_t)swig_a->arg1; 
  arg2 = (uint8_t)swig_a->arg2; 
  arg3 = (uint8_t)swig_a->arg3; 
  
  result = shiftIn(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_wiringPiSPIGetFd(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)wiringPiSPIGetFd(arg1);
  swig_a->result = result; 
}


// void
// _wrap_wiringPiSPIDataRW(void *swig_v)
// {
//   int arg1 ;
//   unsigned char *arg2 = (unsigned char *) 0 ;
//   int arg3 ;
//   int result;
  
//   struct swigargs {
//     int arg1;
//     _gostring_ arg2;
//     long : 0;
//     int result;
//   } *swig_a = (struct swigargs *) swig_v;
  
//   arg1 = (int)swig_a->arg1; 
//   {
//     arg2 = (unsigned char *) PyString_AsString(swig_a->arg2);
//     arg3 = PyString_Size(swig_a->arg2);
//   }
  
//   result = (int)wiringPiSPIDataRW(arg1,arg2,arg3);
//   swig_a->result = result; 
// }


void
_wrap_wiringPiSPISetup(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)wiringPiSPISetup(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_wiringPiI2CSetupInterface(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    _gostring_ arg1;
    int arg2;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)wiringPiI2CSetupInterface(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_wiringPiI2CSetup(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)wiringPiI2CSetup(arg1);
  swig_a->result = result; 
}


void
_wrap_wiringPiI2CRead(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)wiringPiI2CRead(arg1);
  swig_a->result = result; 
}


void
_wrap_wiringPiI2CReadReg8(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)wiringPiI2CReadReg8(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_wiringPiI2CReadReg16(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)wiringPiI2CReadReg16(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_wiringPiI2CWrite(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)wiringPiI2CWrite(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_wiringPiI2CWriteReg8(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    int arg3;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (int)wiringPiI2CWriteReg8(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_wiringPiI2CWriteReg16(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    int arg3;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (int)wiringPiI2CWriteReg16(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_softToneCreate(void *swig_v)
{
  int arg1 ;
  int result;
  
  struct swigargs {
    int arg1;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  result = (int)softToneCreate(arg1);
  swig_a->result = result; 
}


void
_wrap_softToneWrite(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  softToneWrite(arg1,arg2);
  
}


void
_wrap_softServoWrite(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  softServoWrite(arg1,arg2);
  
}


void
_wrap_softServoSetup(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    int arg3;
    int arg4;
    int arg5;
    int arg6;
    int arg7;
    int arg8;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  arg6 = (int)swig_a->arg6; 
  arg7 = (int)swig_a->arg7; 
  arg8 = (int)swig_a->arg8; 
  
  result = (int)softServoSetup(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  swig_a->result = result; 
}


void
_wrap_softPwmCreate(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    int arg3;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (int)softPwmCreate(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_softPwmWrite(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  
  struct swigargs {
    int arg1;
    int arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  softPwmWrite(arg1,arg2);
  
}


void
_wrap_mcp23s17Setup(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    int arg3;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (int)mcp23s17Setup(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_mcp23017Setup(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)mcp23017Setup(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_mcp23s08Setup(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    int arg3;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  result = (int)mcp23s08Setup(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_mcp23008Setup(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  result = (int)mcp23008Setup(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_sr595Setup(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    int arg3;
    int arg4;
    int arg5;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  
  result = (int)sr595Setup(arg1,arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_lcdHome(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  lcdHome(arg1);
  
}


void
_wrap_lcdClear(void *swig_v)
{
  int arg1 ;
  
  struct swigargs {
    int arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  
  lcdClear(arg1);
  
}


void
_wrap_lcdSendCommand(void *swig_v)
{
  int arg1 ;
  uint8_t arg2 ;
  
  struct swigargs {
    int arg1;
    char arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (uint8_t)swig_a->arg2; 
  
  lcdSendCommand(arg1,arg2);
  
}


void
_wrap_lcdPosition(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  
  struct swigargs {
    int arg1;
    int arg2;
    int arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  
  lcdPosition(arg1,arg2,arg3);
  
}


void
_wrap_lcdPutchar(void *swig_v)
{
  int arg1 ;
  uint8_t arg2 ;
  
  struct swigargs {
    int arg1;
    char arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (uint8_t)swig_a->arg2; 
  
  lcdPutchar(arg1,arg2);
  
}


void
_wrap_lcdPuts(void *swig_v)
{
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  struct swigargs {
    int arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  lcdPuts(arg1,arg2);
  
}


void
_wrap_lcdPrintf(void *swig_v)
{
  int arg1 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  struct swigargs {
    int arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  
  lcdPrintf(arg1,arg2,arg3);
  
}


void
_wrap_lcdInit(void *swig_v)
{
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  int arg11 ;
  int arg12 ;
  int arg13 ;
  int result;
  
  struct swigargs {
    int arg1;
    int arg2;
    int arg3;
    int arg4;
    int arg5;
    int arg6;
    int arg7;
    int arg8;
    int arg9;
    int arg10;
    int arg11;
    int arg12;
    int arg13;
    long : 0;
    int result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int)swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (int)swig_a->arg3; 
  arg4 = (int)swig_a->arg4; 
  arg5 = (int)swig_a->arg5; 
  arg6 = (int)swig_a->arg6; 
  arg7 = (int)swig_a->arg7; 
  arg8 = (int)swig_a->arg8; 
  arg9 = (int)swig_a->arg9; 
  arg10 = (int)swig_a->arg10; 
  arg11 = (int)swig_a->arg11; 
  arg12 = (int)swig_a->arg12; 
  arg13 = (int)swig_a->arg13; 
  
  result = (int)lcdInit(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  swig_a->result = result; 
}


#ifdef __cplusplus
}
#endif

